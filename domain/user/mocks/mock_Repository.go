// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	user "go-clean-arch-ddd/domain/user"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockRepository) Create(_a0 *user.User) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*user.User) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *user.User
func (_e *MockRepository_Expecter) Create(_a0 interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockRepository_Create_Call) Run(run func(_a0 *user.User)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.User))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(id string, err error) *MockRepository_Create_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(*user.User) (string, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockRepository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *MockRepository_Expecter) Delete(id interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockRepository_Delete_Call) Run(run func(id string)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(_a0 error) *MockRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(string) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Edit provides a mock function with given fields: id, _a1
func (_m *MockRepository) Edit(id string, _a1 *user.User) error {
	ret := _m.Called(id, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *user.User) error); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Edit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit'
type MockRepository_Edit_Call struct {
	*mock.Call
}

// Edit is a helper method to define mock.On call
//   - id string
//   - _a1 *user.User
func (_e *MockRepository_Expecter) Edit(id interface{}, _a1 interface{}) *MockRepository_Edit_Call {
	return &MockRepository_Edit_Call{Call: _e.mock.On("Edit", id, _a1)}
}

func (_c *MockRepository_Edit_Call) Run(run func(id string, _a1 *user.User)) *MockRepository_Edit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*user.User))
	})
	return _c
}

func (_c *MockRepository_Edit_Call) Return(_a0 error) *MockRepository_Edit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Edit_Call) RunAndReturn(run func(string, *user.User) error) *MockRepository_Edit_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockRepository) Get(id string) (*user.User, error) {
	ret := _m.Called(id)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*user.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *MockRepository_Expecter) Get(id interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockRepository_Get_Call) Run(run func(id string)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(_a0 *user.User, _a1 error) *MockRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func(string) (*user.User, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *MockRepository) GetByEmail(email string) (*user.User, error) {
	ret := _m.Called(email)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*user.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockRepository_Expecter) GetByEmail(email interface{}) *MockRepository_GetByEmail_Call {
	return &MockRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *MockRepository_GetByEmail_Call) Run(run func(email string)) *MockRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_GetByEmail_Call) Return(_a0 *user.User, _a1 error) *MockRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetByEmail_Call) RunAndReturn(run func(string) (*user.User, error)) *MockRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
