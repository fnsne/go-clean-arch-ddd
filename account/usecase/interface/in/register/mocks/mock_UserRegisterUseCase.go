// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	register "go-clean-arch-ddd/account/usecase/interface/in/register"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRegisterUseCase is an autogenerated mock type for the UseCase type
type MockUserRegisterUseCase struct {
	mock.Mock
}

type MockUserRegisterUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRegisterUseCase) EXPECT() *MockUserRegisterUseCase_Expecter {
	return &MockUserRegisterUseCase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: input
func (_m *MockUserRegisterUseCase) Execute(input register.Input) (register.Output, error) {
	ret := _m.Called(input)

	var r0 register.Output
	var r1 error
	if rf, ok := ret.Get(0).(func(register.Input) (register.Output, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(register.Input) register.Output); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(register.Output)
	}

	if rf, ok := ret.Get(1).(func(register.Input) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRegisterUseCase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockUserRegisterUseCase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - input register.Input
func (_e *MockUserRegisterUseCase_Expecter) Execute(input interface{}) *MockUserRegisterUseCase_Execute_Call {
	return &MockUserRegisterUseCase_Execute_Call{Call: _e.mock.On("Execute", input)}
}

func (_c *MockUserRegisterUseCase_Execute_Call) Run(run func(input register.Input)) *MockUserRegisterUseCase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(register.Input))
	})
	return _c
}

func (_c *MockUserRegisterUseCase_Execute_Call) Return(_a0 register.Output, _a1 error) *MockUserRegisterUseCase_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRegisterUseCase_Execute_Call) RunAndReturn(run func(register.Input) (register.Output, error)) *MockUserRegisterUseCase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRegisterUseCase creates a new instance of MockUserRegisterUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRegisterUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRegisterUseCase {
	mock := &MockUserRegisterUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
