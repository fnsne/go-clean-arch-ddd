// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	entity "go-clean-arch-ddd/account/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// NextID provides a mock function with given fields:
func (_m *MockUserRepository) NextID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockUserRepository_NextID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextID'
type MockUserRepository_NextID_Call struct {
	*mock.Call
}

// NextID is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) NextID() *MockUserRepository_NextID_Call {
	return &MockUserRepository_NextID_Call{Call: _e.mock.On("NextID")}
}

func (_c *MockUserRepository_NextID_Call) Run(run func()) *MockUserRepository_NextID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_NextID_Call) Return(_a0 string) *MockUserRepository_NextID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_NextID_Call) RunAndReturn(run func() string) *MockUserRepository_NextID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: user
func (_m *MockUserRepository) Save(user entity.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUserRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - user entity.User
func (_e *MockUserRepository_Expecter) Save(user interface{}) *MockUserRepository_Save_Call {
	return &MockUserRepository_Save_Call{Call: _e.mock.On("Save", user)}
}

func (_c *MockUserRepository_Save_Call) Run(run func(user entity.User)) *MockUserRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *MockUserRepository_Save_Call) Return(_a0 error) *MockUserRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Save_Call) RunAndReturn(run func(entity.User) error) *MockUserRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
